import asyncio #Importe le module asyncio, utilis√© pour ex√©cuter du code asynchrone (fonctions async / await).
from typing import Optional
from contextlib import AsyncExitStack

from mcp import ClientSession, StdioServerParameters # Importe les classes n√©cessaires √† la gestion de sessions client MCP.
from mcp.client.stdio import stdio_client # Importe la fonction pour √©tablir une connexion via les flux standard (stdin/stdout).

from anthropic import Anthropic # Importe la classe principale pour interagir avec l‚ÄôAPI Claude (Anthropic).
from dotenv import load_dotenv # Importe la fonction permettant de charger les variables d‚Äôenvironnement depuis un fichier .env.

load_dotenv()  # load environment variables from .env

class MCPClient:
    def __init__(self):
        # Initialize session and client objects
        self.session: Optional[ClientSession] = None
        self.exit_stack = AsyncExitStack()

        # V√©rifie la pr√©sence d'une cl√© Anthropic
        import os
        api_key = os.getenv("ANTHROPIC_API_KEY")
        if not api_key:
            print("‚ö†Ô∏è  No ANTHROPIC_API_KEY found ‚Äî running in offline mode (MCP only).")
            self.anthropic = None
        else:
            try:
                self.anthropic = Anthropic(api_key=api_key)
                print("‚úÖ Anthropic client initialized.")
            except Exception as e:
                print(f"‚ö†Ô∏è  Failed to initialize Anthropic client: {e}")
                self.anthropic = None


    async def connect_to_server(self, server_script_path: str): #M√©thode asynchrone pour lancer et √©tablir la connexion avec un serveur MCP local (Python ou Node.js).
        """Connect to an MCP server
        
        Args:
            server_script_path: Path to the server script (.py or .js)
        """
        is_python = server_script_path.endswith('.py')
        is_js = server_script_path.endswith('.js')
        if not (is_python or is_js):
            raise ValueError("Server script must be a .py or .js file")
            
        command = "python" if is_python else "node"
        server_params = StdioServerParameters(
            command=command, # Commande √† ex√©cuter (python ou node)
            args=[server_script_path], # Fichier du serveur MCP √† lancer
            env=None # Pas de variables d‚Äôenvironnement sp√©cifiques
        )
        
        stdio_transport = await self.exit_stack.enter_async_context(stdio_client(server_params)) #√âtablit une connexion asynchrone avec le serveur via les flux standard
        self.stdio, self.write = stdio_transport ## Stocke les objets de lecture et d‚Äô√©criture du flux MCP.
        self.session = await self.exit_stack.enter_async_context(ClientSession(self.stdio, self.write)) #Cr√©e la session client MCP, qui g√©rera les requ√™tes, les r√©ponses et les appels d‚Äôoutils.
        
        await self.session.initialize() ## Initialise la session (handshake MCP, d√©couverte des outils disponibles, etc.).
        
        # List available tools
        response = await self.session.list_tools()
        tools = response.tools
        print("\nConnected to server with tools:", [tool.name for tool in tools])

    async def process_query(self, query: str) -> str: #Fonction qui envoie une question √† Claude, lui fournit les outils MCP disponibles et traite ses r√©ponses (texte et appels d‚Äôoutils).
        """Process a query using Claude and available tools"""
        messages = [
            {
                "role": "user",
                "content": query
            }
        ]
        
        if not self.anthropic:
            # Mode sans Claude : ex√©cute simplement la commande comme un outil MCP
            if query.startswith("tool "):
                parts = query.split(" ", 2)
                tool_name = parts[1]
                tool_args = {}
                if len(parts) == 3:
                    import json
                    try:
                        tool_args = json.loads(parts[2])
                    except json.JSONDecodeError:
                        return "‚ùå Invalid JSON arguments."

                result = await self.session.call_tool(tool_name, tool_args)
                return f"üõ†Ô∏è  Tool '{tool_name}' executed:\n{result.content}"

            return "ü§ñ Anthropic (Claude) is not configured. Use 'tool <name> {json_args}' to call MCP tools directly."
    
        response = await self.session.list_tools()
        available_tools = [{ 
            "name": tool.name,
            "description": tool.description,
            "input_schema": tool.inputSchema
        } for tool in response.tools]

        # Initial Claude API call
        response = self.anthropic.messages.create(
            model="claude-sonnet-4-5",
            max_tokens=1000,
            messages=messages,
            tools=available_tools
        )

        # Process response and handle tool calls
        final_text = [] ## Liste des morceaux de texte qui formeront la r√©ponse finale.

        for content in response.content: #Parcourt les diff√©rents √©l√©ments de la r√©ponse (Claude peut renvoyer plusieurs objets : texte, appels d‚Äôoutils, etc.).
            if content.type == 'text':
                final_text.append(content.text)
            elif content.type == 'tool_use':
                tool_name = content.name ## Nom de l‚Äôoutil que Claude veut utiliser.
                tool_args = content.input ## Arguments √† passer √† cet outil.
                
                # Execute tool call
                result = await self.session.call_tool(tool_name, tool_args)  ## Appelle l‚Äôoutil c√¥t√© serveur MCP et r√©cup√®re son r√©sultat.
                final_text.append(f"[Calling tool {tool_name} with args {tool_args}]") ## Ajoute une trace lisible dans la r√©ponse.

                # Continue conversation with tool results / Si Claude avait ajout√© du texte explicatif en plus de la requ√™te d‚Äôoutil, on le garde dans la conversation.
                if hasattr(content, 'text') and content.text:
                    messages.append({
                      "role": "assistant",
                      "content": content.text
                    })
                messages.append({
                    "role": "user", 
                    "content": result.content
                })

                # Get next response from Claude / Relance un nouvel appel √† Claude pour qu‚Äôil poursuive la discussion avec le r√©sultat de l‚Äôoutil.
                response = self.anthropic.messages.create(
                    model="claude-sonnet-4-5",
                    max_tokens=1000,
                    messages=messages,
                )

                final_text.append(response.content[0].text) 

        return "\n".join(final_text) ## Renvoie la r√©ponse compl√®te sous forme de texte continu.





    async def chat_loop(self): #Fonction asynchrone qui cr√©e une boucle interactive dans le terminal pour dialoguer avec Claude et les outils MCP.
        """Run an interactive chat loop"""
        print("\nMCP Client Started!")
        print("Type your queries or 'quit' to exit.")
        
        while True:
            try:
                query = input("\nQuery: ").strip() ## Attend la saisie d‚Äôune requ√™te utilisateur.
                
                if query.lower() == 'quit':
                    break
                    
                response = await self.process_query(query) ## Envoie la requ√™te √† la m√©thode process_query().
                print("\n" + response) ## Affiche la r√©ponse de Claude.
                    
            except Exception as e:
                print(f"\nError: {str(e)}")
    
    async def cleanup(self):
        """Clean up resources"""
        await self.exit_stack.aclose() ## Ferme proprement toutes les ressources ouvertes (connexion, session, etc.).

async def main():
    if len(sys.argv) < 2: #V√©rifie qu‚Äôun argument (chemin vers le serveur MCP) a √©t√© pass√© au script.
        print("Usage: python client.py <path_to_server_script>") 
        sys.exit(1)
        
    client = MCPClient()
    try:
        await client.connect_to_server(sys.argv[1])
        await client.chat_loop()
    finally:
        await client.cleanup()

if __name__ == "__main__":
    import sys
    asyncio.run(main())